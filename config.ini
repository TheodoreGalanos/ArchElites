[collection]
# collection folder
input_dir = F:\PhD_Research\CaseStudies\MAP-Elites\experiments\real_world\Boston
# color map file
color_file = F:\PhD_Research\CaseStudies\MAP-Elites\experiments\real_world\NewYork\color_map.csv
# number of parameters in the generative model
n_genes = 5
# number of pairs to create when selecting by distance
n_pairs = 5
# boundary domain size for individuals in m x m
size_x = 512
size_y = 512

[mapelites]
# random seed
seed = 42
# number of initial random samples
bootstrap_individuals = 1948
# numer of map elites iterations
iterations = 100
# number of curious individuals to select from
n_curious = 50
# True: solve a minimization problem. False: solve a maximization problem
minimization = False
# show the plot or not at the end
interactive = False

[plotting]
# Set to true to highlight the best fitness value in the final plot
highlight_best = True

[quality_diversity]
# Define the quality function.
name = 'percentage of dangerous zones'
# Define the behavioral dimensions
dimensions = fsi,gsi,osr,mh,tare,dangerous,sitting
# Define which dimensions will be used
n_bins = 0,1
# the increment value for each descriptor dimension
step_fsi = 0.16
step_gsi = 0.014
step_osr = 0.02
step_mh = 0.5
step_tare = 0.025
step_dangerous = 1250
step_sitting = 1250
# Define heatmap bins for feature dimensions
# Name each bin as `bin_{name of behavioral dimension}
# If you want to define ONE bin for all constraints, name it `bin_all`
# Note: The bins must be defined by numbers, except for the `inf` label which can be defined ether at the beginning or at the end of the bins.
bin_FSI = -inf,0,8,inf
bin_GSI = -inf,0,0.7,inf
bin_OSR = -inf,0,1,inf
bin_MH = -inf,0,25,inf
bin_TARE = -inf,0.25,1.0,inf
bin_dangerous = -inf,0,62500,inf
bin_sitting = -inf,0,62500,inf

[crossover]
# flat to activate crossover. If False the algorithm selects only 1 individual and mutates it
crossover = True
# crossover function taken from ea_operators.py file.
# name of called function is {type}_crossover(). If `type = UNIFORM` then the function call is `uniform_crossover()`
type = uniform
# list of arguments to the above function
#indgen:float(0,1), amount of genetic material to keep from parent 1.
indgen = 0.5
#indprob:float(0,1), probability for each building polygon to be kept.
indpb = 0.5

[mutation]
# mutation function taken from ea_operators.py file.
# name of called function is {type}_mutation(). If `type = GAUSSIAN` then the function call is `gaussian_mutation()`
type = polynomial
# list of arguments to the above function
#eta:float, highest values keep mutations close to parent individual
eta = 20.0
# low:float, lowest possible building height
low = 5.0
# up:float, highest possible building height
up = 100.0
#mut_pb:float(0,1), the probability for each building to be mutated
mut_pb = 0.25
